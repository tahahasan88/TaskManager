@model TaskManager.Web.Models.TaskViewModel

@{
    ViewData["Title"] = "Edit";
    ViewData["Heading"] = "Task Details";
}


@section HeaderScripts {
    <script src='https://kit.fontawesome.com/a076d05399.js'></script>
    <link rel="stylesheet" href="../../plugins/datatables-bs4/css/dataTables.bootstrap4.min.css">
    <link rel="stylesheet" href="../../plugins/datatables-responsive/css/responsive.bootstrap4.min.css">
    <link rel="stylesheet" href="../../plugins/datatables-select/css/select.bootstrap4.min.css">

}


<div class="container-fluid">
    <div class="row">
        <div class="col-sm-4 col-md-2">
            <div class="color-palette-set mb-1">
                <button type="button" class="btn btn-block btn-primary btn-sm">Return</button>
            </div>
        </div>
        <div class="col-sm-4 col-md-2">
            <div class="color-palette-set mb-1">
                <button type="button" class="btn btn-block btn-primary btn-sm">Edit</button>
            </div>
        </div>
        <div class="col-sm-4 col-md-2">
            <div class="color-palette-set mb-1">
                <button type="button" id="deleteTaskBtnId" class="btn btn-block btn-danger btn-sm">Delete</button>
            </div>
        </div>
    </div>
    </br>
    <div class="row">
        <div class="col-sm-6">
            <!-- Default box -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Progress Update</h3>
                    <div class="card-tools">
                        <button type="button" id="updateTaskBtnId" class="btn  btn-primary btn-sm">New</button>
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Status</dt>
                        <dd class="col-sm-8"><span id="taskStatusBadge" class="badge bg-primary">@Model.Task.TaskStatus.Status</span></dd>
                        <dt class="col-sm-4">Progress</dt>
                        <dd class="col-sm-8"><input id="taskProgressUpdateId" type="text" class="knob" value="@Model.Task.TaskProgress%" data-width="90" data-height="90" data-fgColor="#3c8dbc"></dd>
                        <dt class="col-sm-4">Remarks</dt>
                        <dd class="col-sm-8" id="taskRemarks">@Model.Task.Description</dd>
                    </dl>
                </div>
            </div>
            <!-- /.card -->
        </div>
        <div class="col-sm-6">
            <!-- Default box -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title"><i class='fas fa-user-alt'></i>&nbsp;People</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div id="people-placeholder" class="card-body">
                    @*<div class="d-flex justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="far fa-user-circle" style="font-size:24px" aria-hidden="true">
                                </i>&nbsp;Taha Hasan&nbsp;
                                <i class="fas fa-wifi" aria-hidden="true"></i>
                            </div>
                            <span class="float-right text-md">Creator</span>
                        </div>
                        <br />
                        <br />
                        <div class="d-flex justify-content-between">
                            <div class="d-flex align-items-center">
                                <i class="far fa-user-circle" style="font-size:24px" aria-hidden="true">
                                </i>&nbsp;Taha Hasan&nbsp;
                                <i class="fas fa-wifi" aria-hidden="true"></i>
                            </div>
                            <span class="float-right text-md">Creator</span>
                        </div>*@
                </div>
            </div>
            <!-- /.card -->
        </div>
    </div>
    <div id="modal-update-placeholder">
    </div>

    <div class="row">
        <div class="col-sm-6">
            <!-- Default box -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">Sub Tasks</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="card-body" id="subTaskPlaceHolder">
                    @*<div class="row">
                            <div class="col-5 pl-0 d-flex align-items-center">
                                <input class="mr-1" type="checkbox">
                                <input value="Create a report" class="w-100" disabled />
                            </div>
                            <div class="col-6 d-flex align-items-center">
                                <i class="far fa-user-circle mr-1" style="font-size:24px" aria-hidden="true">
                                </i>
                                <a href="javascript:void(null);" name="employeeLink" rel="nofollow noreferrer"><u>Taha Hasan</u></a>
                                <div class="form-group mb-0 w-100" name="employeeDrpDwndiv" style="display:none;">
                                    <select name="employeeDrpDwn" class="form-control" id="sel1">
                                        <option>1</option>
                                        <option>2</option>
                                        <option>3</option>
                                        <option>4</option>
                                    </select>
                                </div>
                            </div>
                            <div class="col-1">
                                <i name="delete" id="24" class="fas fa-trash-alt"></i>
                            </div>
                        </div>
                        <div class="row">
                            <div class="input-group mb-2">
                                <input type="text" class="form-control">
                                <span class="input-group-append">
                                    <button type="button" class="btn btn-info btn-flat">Add Task</button>
                                </span>
                            </div>
                        </div>*@
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-10">
            <!-- Default box -->
            <div class="card">
                <div class="card-header">
                    <h3 class="card-title">History</h3>
                    <div class="card-tools">
                        <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                            <i class="fas fa-minus"></i>
                        </button>
                    </div>
                </div>
                <div class="btn-group-toggle flex-wrap mt-3 ml-3" data-toggle="buttons">
                    <label class="btn btn-info active">
                        <input type="checkbox" class="historyType" value="progress" checked autocomplete="off"> Progress
                    </label>
                    <label class="btn btn-info">
                        <input type="checkbox" class="historyType" value="assignment" autocomplete="off"> Assignment
                    </label>
                    <label class="btn btn-info">
                        <input type="checkbox" class="historyType" value="followup" autocomplete="off"> Follow Up
                    </label>
                    <label class="btn btn-info">
                        <input type="checkbox" class="historyType" value="followupresponse" autocomplete="off"> Follow Up Response
                    </label>
                    <label class="btn btn-info">
                        <input type="checkbox" class="historyType" value="subtasks" autocomplete="off"> SubTasks
                    </label>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="historyTable" class="table table-bordered table-hover">
                            <thead>
                                <tr>
                                    <th>Date</th>
                                    <th>Type</th>
                                    <th>Description</th>
                                    <th>Action By</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


</div>


@section BodyScripts {

    <script src="../../plugins/datatables/jquery.dataTables.min.js"></script>
    <script src="../../plugins/datatables-bs4/js/dataTables.bootstrap4.min.js"></script>
    <script src="../../plugins/datatables-responsive/js/dataTables.responsive.min.js"></script>
    <script src="../../plugins/datatables-responsive/js/responsive.bootstrap4.min.js"></script>
    <script src="../../plugins/datatables-select/js/select.bootstrap4.min.js"></script>
    <script src="../../plugins/datatables-select/js/dataTables.select.min.js"></script>
    



    <script>
        $(document).ready(function () {

            var thisPage = '../tasks';
            $(".nav-sidebar .nav-item .nav-link").each(function () {
                $(this).removeClass("active");
                var href = $(this).attr('href');
                if (href == thisPage) {
                    $(this).addClass('active');
                }
            });
            var disabled = false;

            function setFormState() {

                //Check delete permissions
                $.ajax({
                    type: "GET",
                    url: baseUrl.replace("tasks/Edit", "") + "taskemployees/GetUserPermissions",
                    contentType: "application/json; charset=utf-8",
                    data: {taskId : @Model.Task.Id, userName : "@Model.CurrentUserName"},
                    datatype: "json",
                    success: function (data) {
                        tmpData = data;
                        console.log(tmpData);
                        if (tmpData.isTaskDeletionAllowed == true) {
                            //disabled = true;
                            $("#deleteTaskBtnId").removeClass();
                            $("#deleteTaskBtnId").addClass('btn btn-block btn-danger btn-sm');

                                $("#deleteTaskBtnId").click(function () {
                                    var result = confirm("Are you sure you want to delete this task?");
                                    if (result) {
                                        $.ajax({
                                            type: "POST",
                                            url: baseUrl.replace("tasks/Edit", "") + "tasks/DeleteTask?id=" + @Model.Task.Id,
                                            contentType: "application/json; charset=utf-8",
                                            data: null,
                                            datatype: "json",
                                            success: function (data) {
                                                if (data.isDeleted == true) {
                                                    location.href = baseUrl.replace("tasks/Edit", "") + "tasks/DeleteRedirect?id=" + @Model.Task.Id;
                                                }
                                            },
                                            error: function () {
                                                alert("Dynamic content load failed.");
                                            }
                                        });
                                    }
                            });
                        }
                        else {
                            $("#deleteTaskBtnId").removeClass();
                            $("#deleteTaskBtnId").addClass('btn btn-block btn-secondary btn-sm');
                        }

                        if (tmpData.isTaskEditAllowed == true) {
                            $("#updateTaskBtnId").removeClass();
                            $("#updateTaskBtnId").addClass('btn  btn-primary btn-sm');

                            $("#updateTaskBtnId").click(function () {
                                var $buttonClicked = $(this);
                                //var id = $buttonClicked.attr('data-id');
                                var options = { "backdrop": "static", keyboard: true };
                                $.ajax({
                                    type: "GET",
                                    url: baseUrl.replace("/Edit", "") + "/UpdateTaskProgress",
                                    contentType: "application/json; charset=utf-8",
                                    data: { id: @Model.Task.Id },
                                    datatype: "json",
                                    success: function (data) {
                                        progressUpdatePlaceHolder.html(data);
                                        progressUpdatePlaceHolder.find('.modal').modal(options);
                                        progressUpdatePlaceHolder.find('.modal').modal('show');
                                        if ($("#taskProgressInput").val() > 0 && $("#taskProgressInput").val() < 100) {
                                            $("#Status").val("2");
                                        }
                                          else if ($("taskProgressInput").val() == 0 || $("taskProgressInput").val() == null) {
                                                $("#Status").val("1");
                                            }
                                            else
                                                $("#Status").val("3");

                                        $("#taskProgressInput").change(function () {
                                            if ($(this).val() > 0 && $(this).val() < 100) {
                                                $("#Status").val("2");
                                            }
                                            else if ($(this).val() == 0) {
                                                $("#Status").val("1");
                                            }
                                            else
                                                $("#Status").val("3");
                                        });

                                    },
                                    error: function () {
                                        alert("Dynamic content load failed.");
                                    }
                                });
                            });
                        }
                        else {
                            $("#updateTaskBtnId").removeClass();
                            $("#updateTaskBtnId").addClass('btn  btn-secondary btn-sm');
                        }
                        if (tmpData.isSubTaskEditAllowed == true) {
                            disabled = false;
                        }
                        else {
                            disabled = true;
                        }
                        getSubTasksList();
                    },
                    error: function () {
                        alert("Dynamic content load failed.");
                    }
                });


            }


            function setBadgeStyle() {

                $("#taskStatusBadge").removeClass();
                if ("@Model.Task.TaskStatus.Status" == 'Completed') {

                    $("#taskStatusBadge").addClass('badge badge-success');
                }
                else if ("@Model.Task.TaskStatus.Status" == 'In Progress') {
                    $("#taskStatusBadge").addClass('badge badge-warning');
                }
                else if ("@Model.Task.TaskStatus.Status" == 'Not Started') {
                    $("#taskStatusBadge").addClass('badge badge-secondary');
                }
                else if ("@Model.Task.TaskStatus.Status" == 'On Hold') {
                    $("#taskStatusBadge").addClass('badge badge-secondary');
                }
                 else if ("@Model.Task.TaskStatus.Status" == 'Cancelled') {
                    $("#taskStatusBadge").addClass('badge badge-secondary');
                }
            }


            var table = $('#historyTable').DataTable({
                columns: [
                {data: "Date"},
                {data: "Type"},
                {data: "Description"},
                {data: "Action By"}
                ]
            });

            var baseUrl = "@Html.Raw(this.Context.Request.Scheme + "://" + this.Context.Request.Host + this.Context.Request.Path)";
            var progressUpdatePlaceHolder = $("#modal-update-placeholder");
            var subTaskPlaceHolder = $("#subTaskPlaceHolder");
            var historyList = [];
            var historyTypeList = [];
            var employeeList = [];
            var allEmployeeList = [];

            function initializeHistoryTable() {
                historyTypeList = [];
                $.each($("input[class='historyType']:checked"), function () {
                    historyTypeList.push($(this).val());
                });

                updateHistoryTable(historyTypeList);
            }


            $('.historyType').click(function () {
                historyTypeList = [];
                $.each($("input[class='historyType']:checked"), function () {
                    historyTypeList.push($(this).val());
                });

                updateHistoryTable(historyTypeList);
            });



            progressUpdatePlaceHolder.on('click', '[data-save="modal"]', function (event) {
                event.preventDefault();

                var form = $(this).parents('.modal').find('form');
                var actionUrl = form.attr('action');
                $("#TaskProgress").val($("#taskProgressId").val());
                
                var dataToSend = form.serialize();
                $("#progressSpinner").show();
                var status = $("#Status").val();
                var taskProgress = $("#TaskProgress").val();
                var remarks = $("#Remarks").val();

                $("#taskStatusBadge").removeClass();
                if (status == '1') {
                    $("#taskStatusBadge").html("Not Started");
                    $("#taskStatusBadge").addClass('badge badge-secondary');
                    //$("#taskStatusBadge").val("In");
                }
                else if (status == '2') {
                    $("#taskStatusBadge").html("In Progress");
                    $("#taskStatusBadge").addClass('badge badge-warning');
                }
                else if (status == '3') {
                    $("#taskStatusBadge").html("Completed");
                    $("#taskStatusBadge").addClass('badge badge-success');
                }
                $("#taskProgressUpdateId").val(taskProgress + "%");
                $("#taskRemarks").html(remarks);

                $.post(actionUrl, dataToSend).done(function (data) {
                    var newBody = $('.modal-body', data);
                    $("#progressSpinner").hide();
                    console.log('here');
                    console.log(data);
                    progressUpdatePlaceHolder.find('.modal-body').replaceWith(newBody);
                    var isValid = newBody.find('[name="IsValid"]').val() == 'True';
                    if (isValid) {
                        getHistoryList();
                        progressUpdatePlaceHolder.find('.modal').modal('hide');
                    }
                });
            });


            function getHistoryList() {

                historyList = [];
                 $.ajax({
                        type: "GET",
                        url: baseUrl.replace("tasks/Edit", "") + "history/list?taskId=" + @Model.Task.Id,
                        contentType: "application/json; charset=utf-8",
                        data: null,
                        datatype: "json",
                        success: function (data) {
                            $.each(data, function (i, val) {
                                tmpData = data[i];
                                $.each(tmpData, function (i, val) {
                                    historyList.push(tmpData[i]);
                                });
                            });
                            initializeHistoryTable();
                        },
                        error: function () {
                            alert("Dynamic content load failed.");
                        }
                    });
            }

            function getSubTasksList() {

                var disableThis = "";
                if (disabled == true) {
                    disableThis = "disabled"
                }
                var selectedDrownHtml = "<select name=\"employeeDrpDwn\" class=\"form-control\" id=\"empdropdownId\">setoptions</select>";
                var allEmployees = [];

                var subTaskBody = "<div class=\"row\">"+
                "<div class=\"col-5 pl-0 d-flex align-items-center\">" +
                    "<input class=\"mr-1\" type=\"checkbox\" id=\"checkboxtaskid\" ischecked name=\"completecheck\" " + disableThis + ">" +
                    "<input name = \"subTaskInput\" id=\"inputtaskid\" value=\"tasktitle\" " + disableThis + " class=\"w-100\" />" +
                    "</div>" +
                    "<div class=\"col-6 d-flex align-items-center\">" +
                    "<i class=\"far fa-user-circle mr-1\" style=\"font-size:24px\" aria-hidden=\"true\">" +
                    "</i>" +
                    "<a "+ disableThis +" href=\"javascript:void(null);\" name=\"employeeLink\" rel=\"nofollow noreferrer\"><u>linkUserName</u></a>" +
                    "<div class=\"form-group mb-0 w-100\" name=\"employeeDrpDwndiv\" style=\"display:none;\">" +
                    "employeeOptions" +
                    "</div>" +
                    "</div>" +
                    "<div class=\"col-1\">" +
                    "<i name=\"delete\" id=\"deletetaskid\"  " + disableThis + " class=\"fas fa-trash-alt\"></i>" +
                    "</div>" +
                    "</div>";

                var addSubTaskButtonHtml = "<div class=\"row\">" +
                        "<div class=\"input-group mb-2\">" +
                            "<input type=\"text\" id=\"newTaskInputId\" class=\"form-control\">" +
                            "<span class=\"input-group-append\">" +
                                "<button " + disableThis+ " id=\"addSubtaskBtnId\" type=\"button\" class=\"btn btn-info btn-flat\">Add Sub Task</button>" +
                            "</span>" +
                        "</div>" +
                    "</div>";

                var newBody = "";
                $.ajax({
                type: "GET",
                url: baseUrl.replace("tasks/Edit", "") + "subtasks/SubTaskList",
                contentType: "application/json; charset=utf-8",
                data: {id : @Model.Task.Id },
                datatype: "json",
                    success: function (data) {

                        $.each(data, function (i, val) {
                            tmpData = data[i];

                            $.each(tmpData.employeeVMList, function (j, value) {
                                allEmployees.push(tmpData.employeeVMList[j]);
                            });

                            $.each(tmpData.subTaskVMList, function (i, val) {
                                newBody += subTaskBody;
                                var isSubTaskCompleted = "";
                                if (tmpData.subTaskVMList[i].isCompleted == true) {
                                    isSubTaskCompleted = "checked";
                                }
                                newBody = newBody.replace("checkboxtaskid", tmpData.subTaskVMList[i].subTaskId);
                                newBody = newBody.replace("inputtaskid", tmpData.subTaskVMList[i].subTaskId);
                                newBody = newBody.replace("deletetaskid", tmpData.subTaskVMList[i].subTaskId);
                                newBody = newBody.replace("tasktitle", tmpData.subTaskVMList[i].description);
                                newBody = newBody.replace("linkUserName", tmpData.subTaskVMList[i].subTaskAssignee);
                                newBody = newBody.replace("ischecked", isSubTaskCompleted);
                                var dropdown = "";
                                for (var j = 0; j < allEmployees.length; j++) {
                                    if (tmpData.subTaskVMList[i].subTaskAssignee == allEmployees[j].userName) {
                                        dropdown += "<option selected>" + allEmployees[j].userName + "</option>";
                                    }
                                    else {
                                        dropdown += "<option>" + allEmployees[j].userName + "</option>";
                                    }

                                }
                                var thisdropDownHtml = selectedDrownHtml;
                                thisdropDownHtml = thisdropDownHtml.replace("setoptions", dropdown);
                                newBody = newBody.replace("employeeOptions", thisdropDownHtml);
                                newBody = newBody.replace("empdropdownId", tmpData.subTaskVMList[i].subTaskId);
                                newBody += "<br/>"
                            });

                        });
                        if (newBody.length > 0) {

                            newBody += addSubTaskButtonHtml;
                            subTaskPlaceHolder.html(newBody);

                            if (disabled == false) {
                                $('i[name ="delete"]').click(function () {
                                    var result = confirm("Are you sure you want to delete this subtask?");
                                    if (result) {
                                        $.ajax({
                                            type: "POST",
                                            url: baseUrl.replace("tasks/Edit", "") + "subtasks/DeleteSubTask?subTaskId=" + $(this).attr('id'),
                                            contentType: "application/json; charset=utf-8",
                                            data: null,
                                            datatype: "json",
                                            success: function (data) {
                                                subTaskPlaceHolder.html('');
                                                getSubTasksList();
                                            },
                                            error: function () {
                                                alert("Dynamic content load failed.");
                                            }
                                        });
                                    }
                                });
                            }

                            $('input[name ="completecheck"]').click(function () {

                                var description = $(this).closest('.row').find('input[name ="subTaskInput"]').val();
                                var isCompleted = $(this).is(':checked');
                                var subTaskId = $(this).attr('id');
                                var assignee = $(this).closest('.row').find('[name="subTaskassignee"]').html()
                                var taskId = "@Model.Task.Id";
                                updateSubTask(subTaskId, taskId, description, assignee, isCompleted);
                            });
                            if (disabled == false) {
                                $('input[name ="subTaskInput"]').change(function () {
                                    var description = $(this).closest('.row').find('input[name ="subTaskInput"]').val();
                                    var isCompleted = $(this).is(':checked');
                                    var subTaskId = $(this).attr('id');
                                    var assignee = $(this).closest('.row').find('[name="subTaskassignee"]').html()
                                    var taskId = "@Model.Task.Id";
                                    updateSubTask(subTaskId, taskId, description, assignee, isCompleted);
                                });
                            }
                        }
                        else {
                             newBody += addSubTaskButtonHtml;
                             subTaskPlaceHolder.html(newBody);
                        }

                        $("#addSubtaskBtnId").click(function () {
                            var taskId = "@Model.Task.Id";
                            var description = $("#newTaskInputId").val();
                            var isCompleted = false;
                            var assignee = "";
                            if (description == "") {
                                alert("please enter description");
                            }
                            else
                                addSubTask(taskId, description, isCompleted, assignee);
                        });

                        $("select[name='employeeDrpDwn']").focusout(function () {
                            var end = this.value;
                            $(this).closest('.row').find('[name="employeeDrpDwndiv"]').hide();
                            $(this).closest('.row').find('[name="employeeLink"]').html(end);
                            $(this).closest('.row').find('[name="employeeLink"]').show();
                        });

                         $("select[name='employeeDrpDwn']").change(function () {
                            var end = this.value;
                            $(this).closest('.row').find('[name="employeeDrpDwndiv"]').hide();
                            $(this).closest('.row').find('[name="employeeLink"]').html(end);
                            $(this).closest('.row').find('[name="employeeLink"]').show();

                            var description = $(this).closest('.row').find('input[name ="subTaskInput"]').val();
                            var isCompleted = $(this).is(':checked');
                            var subTaskId = $(this).attr('id');
                            var assignee = end;
                            var taskId = "@Model.Task.Id";
                            updateSubTask(subTaskId, taskId, description, assignee, isCompleted);

                        });

                        if (disabled == false) {
                            $("a[name='employeeLink']").click(function () {
                                $(this).hide();
                                $(this).closest('.row').find('[name="employeeDrpDwndiv"]').show();
                            });
                        }

                },
                error: function () {
                    alert("Dynamic content load failed.");
                }
                });
            }

            function updateSubTask(subtaskId, taskId, description, assignee, isCompleted) {

                $.post(baseUrl.replace("tasks/Edit", "") + "subtasks/Update",
                    { id: subtaskId, description: description, taskId: taskId, assignee: assignee, isCompleted : isCompleted},
                    function (returnedData) {
                        if (returnedData.subTaskExist == true) {
                            alert('sub task already exists');
                        }
                        else if (returnedData.subTaskUpdated == true) {
                            getHistoryList();
                            appendEmployeeList();
                            alert("sub task updated");
                        }
                    }).fail(function(){
                          console.log("error");
                    });
            }

            function addSubTask(taskId, description, isCompleted, assignee) {

                $.post(baseUrl.replace("tasks/Edit", "") + "subtasks/Create",
                    { description: description, taskId: taskId, isCompleted : isCompleted, assignee: assignee},
                    function (returnedData) {
                        if (returnedData.subTaskExist == true) {
                            alert('sub task with same title already exists');
                        }
                        else if (returnedData.subTaskAdded == true) {
                            getHistoryList();
                            alert("sub task added");
                            getSubTasksList();
                        }

                    }).fail(function(){
                          console.log("error");
                    });

            }

            function getAllEmployees() {

                    $.ajax({
                    type: "GET",
                    url: baseUrl.replace("tasks/Edit", "") + "TaskEmployees/AllEmployees",
                    contentType: "application/json; charset=utf-8",
                    data: null,
                    datatype: "json",
                    success: function (data) {
                        $.each(data, function (i, val) {
                            tmpData = data[i];
                            $.each(tmpData, function (i, val) {
                                allEmployeeList.push(tmpData[i]);
                            });
                        });
                    },
                    error: function () {
                        alert("Dynamic content load failed.");
                    }
                });
            }

            function getTaskDescription(taskCapacityId) {

                description = "";
                if (taskCapacityId == @((int)TaskManager.Common.Common.TaskCapacity.Creator)) {
                    description = "Creator";
                }
                else if (taskCapacityId == @((int)TaskManager.Common.Common.TaskCapacity.Assignee)) {
                    description = "Assignee";
                }
                else if (taskCapacityId == @((int)TaskManager.Common.Common.TaskCapacity.Follower)) {
                    description = "Follower";
                }
                else if (taskCapacityId == @((int)TaskManager.Common.Common.TaskCapacity.ExTaskAssignee)) {
                    description = "Ex-Task Assignee";
                }
                else if (taskCapacityId == @((int)TaskManager.Common.Common.TaskCapacity.SubTaskAssignee)) {
                    description = "Sub Task Assignee";
                }
                return description;
            }

            function appendEmployeeList() {

                 var cardBody ="<div class=\"d-flex justify-content-between\">" +
                        "<div class=\"d-flex align-items-center\">" +
                            "<i class=\"far fa-user-circle\" style=\"font-size:24px\" aria-hidden=\"true\">" +
                            "</i>&nbsp;userName&nbsp" +
                            "<i class=\"fas fa-wifi\" aria-hidden=\"true\"></i>" +
                        "</div>" +
                        "<span class=\"float-right text-md\">capacity</span>" +
                    "</div>";

                var employeeHtmlBody = "";
                 $.ajax({
                        type: "GET",
                        url: baseUrl.replace("tasks/Edit", "") + "TaskEmployees/list?taskId=" + @Model.Task.Id,
                        contentType: "application/json; charset=utf-8",
                        data: null,
                        datatype: "json",
                        success: function (data) {
                            $.each(data, function (i, val) {
                                tmpData = data[i];
                                $.each(tmpData, function (i, val) {
                                    employeeHtmlBody += cardBody;
                                    employeeList.push(tmpData[i]);
                                    employeeHtmlBody = employeeHtmlBody.replace("userName", tmpData[i].userName);
                                    employeeHtmlBody = employeeHtmlBody.replace("capacity", getTaskDescription(tmpData[i].capacityId));

                                });
                                if (i < data.length - 1) {
                                    employeeHtmlBody += "</br></br>";
                                }
                            });
                            $("#people-placeholder").html('');
                            $("#people-placeholder").html(employeeHtmlBody);
                        },
                        error: function () {
                            alert("Dynamic content load failed.");
                        }
                    });
            }

            function getHistoryType(historyType) {
                var historyTypeId = 0;
                if (historyType == "progress") {
                    historyTypeId = "@((int)TaskManager.Common.Common.AuditType.Progress)";
                }
                else if (historyType == "assignment") {
                    historyTypeId = "@((int)TaskManager.Common.Common.AuditType.Assignment)";
                }
                if (historyType == "followup") {
                    historyTypeId = "@((int)TaskManager.Common.Common.AuditType.FollowUp)";
                }
                else if (historyType == "followupresponse") {
                    historyTypeId = "@((int)TaskManager.Common.Common.AuditType.FollowUpResponse)";
                }
                else if (historyType == "subtasks") {
                    historyTypeId = "@((int)TaskManager.Common.Common.AuditType.SubTasks)";
                }
                return historyTypeId;
            }

            function getHistoryTypeDescription(historyTypeId) {
                var historyType = "";
                if (historyTypeId == @((int)TaskManager.Common.Common.AuditType.Progress)) {
                    historyType = "Progress";
                }
                else if (historyTypeId == @((int)TaskManager.Common.Common.AuditType.Assignment)) {
                    historyType = "Assignment";
                }
                if (historyTypeId == @((int)TaskManager.Common.Common.AuditType.FollowUp)) {
                    historyType = "Follow up";
                }
                else if (historyTypeId == @((int)TaskManager.Common.Common.AuditType.FollowUpResponse)) {
                    historyType = "follow up response";
                }
                else if (historyTypeId == @((int)TaskManager.Common.Common.AuditType.SubTasks)) {
                    historyType = "Sub tasks";
                }
                return historyType;
            }


            function updateHistoryTable(typeList) {

                table.rows().remove().draw();
                var filteredHistory = [];
                for (var i = 0; i < typeList.length; i++) {
                        var thisHistory = []
                        thisHistory = historyList.filter(function(history) {
                            return history.type == getHistoryType(typeList[i]);
                        });
                    filteredHistory = filteredHistory.concat(thisHistory);
                }

                for (var i = 0; i < filteredHistory.length; i++) {
                        table.rows.add([{
                            "Date": filteredHistory[i].historyDate,
                            "Type": getHistoryTypeDescription(filteredHistory[i].type),
                            "Description": filteredHistory[i].description,
                            "Action By": filteredHistory[i].actionBy
                        }]).draw();
                }
            }

            setFormState();
            setBadgeStyle();
            appendEmployeeList();
            getHistoryList();
        });

    </script>
}
