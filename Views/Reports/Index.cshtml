
@section HeaderScripts {

    <style>
        .bade-onhold{
            color: #fff;
            background-color: #6f42c1;
        }

        .bade-cancelledtask{
            color: #fff;
            background-color: #343a40;
        }

        table.dataTable tbody tr.selected {
            color: black;
            background-color: #C0C0C0;
        }

         table.dataTable tbody tr.selected1 {
            color: white;
            background-color: #94908a;
        }

        #reportTable th {
          background-color: #343a40;
          color: white;
        }

        #reportUserDetailTable th {
          background-color: #343a40;
          color: white;
        }

    </style>
}


<div class="container-fluid">

    <div class="row">
        <div class="col-12">

            @{
                if (ViewData["deletionMessage"] != null)
                {
                    <div class="alert alert-danger alert-dismissible" role="alert">
                        <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a>
                        @ViewData["deletionMessage"]
                    </div>
                }
            }

            <div id="reportUserDetailDiv"></div>
            <div class="card">
                <div id="modal-default">
                </div>
                <!-- /.card-header -->
                <div class="card-header">
                    <h3 class="card-title">Reports</h3>
                </div>

                <div class="card-body">
                    <div class="table-responsive">
                        <table id="reportTable" class="table table-bordered table-hover" width="100%">
                            <thead>
                                <tr>
                                    <th>Tag Id</th>
                                    <th>Employee</th>
                                    <th>Total</th>
                                    <th>Not Started Yet</th>
                                    <th>In Progress</th>
                                    <th>Completed</th>
                                    <th>On Hold</th>
                                    <th>Cancelled</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
                    <!-- /.card-body -->
            </div>
            <!-- /.card -->
            <!-- /.card -->
        </div>
        <!-- /.col -->
    </div>
</div>

@section BodyScripts {

    <script>
    var currentUserName = '';
    var thisPage = '../reports';
    var thisBaseUrl = "@Html.Raw(this.Context.Request.Scheme + "://" + this.Context.Request.Host)";

    @if (ViewData["UserName"] != null)
    {
        <text>
            currentUserName = "@ViewData["UserName"]";
            $("#employeeDetailId").html("@ViewData["UserName"]");
            currentEmployeeName = "@ViewData["EmployeeName"]";
        </text>
    }

    $(document).ready(function () {

    var employeeDiv = $('#employeeDetailDiv');
    var cancelledTaskStatusId = @((int)TaskManager.Common.Common.TaskStatus.Cancelled);
    var completedTaskStatusId = @((int)TaskManager.Common.Common.TaskStatus.Completed);
    var inProgressTaskStatusId = @((int)TaskManager.Common.Common.TaskStatus.InProgress);
    var notStartedTaskStatusId = @((int)TaskManager.Common.Common.TaskStatus.NotStarted);
    var onHoldTaskStatusId = @((int)TaskManager.Common.Common.TaskStatus.OnHold);

        $(".nav-sidebar .nav-item .nav-link").each(function () {
            $(this).removeClass("active");
            var href = $(this).attr('href');
            if (href == thisPage) {
                $(this).addClass('active');
            }
        });

        function showEmployeeDetails(userName) {

            $.ajax({
                type: "GET",
                url: thisBaseUrl + "/employeeDetail/Index",
                contentType: "application/json; charset=utf-8",
                data: {userName : userName},
                datatype: "json",
                success: function (data) {
                    employeeDiv.html(data);
                    employeeDiv.find('.modal').modal('show');
                    employeeDiv.show();

                    var employeeTasksTable = $('#employeeTasksTable').
                        DataTable({
                            paging: false,
                            info: false,
                            searching: false,
                            "scrollY": 300,
                            //scrollX:        true,
                            //scrollCollapse: true,
                            initComplete: function (settings, json) {
                                var response = settings.json;
                                if (response.pendingCount == 0) {
                                    $("#taskCount").hide();
                                }
                                $("#taskCount").html(response.pendingCount);
                                
                                var taskDonutData = {
                                    labels: [
                                        'Completed',
                                        'Not Started Yet',
                                        'In Progress',
                                        'On Hold',
                                        'Cancelled'
                                    ],
                                    datasets: [
                                        {
                                            data: [response.completedCount, response.notStartedCount,
                                            response.progressCount, response.onHoldCount, response.cancelledCount],
                                            backgroundColor: ['#00a65a', '#6c757d', '#f39c12', '#6f42c1', '#343a40'],
                                        }
                                    ]
                                }

                                var pieChartCanvas = $('#pieChart').get(0).getContext('2d');
                                var pieData = taskDonutData;
                                var pieOptions = {
                                    maintainAspectRatio: false,
                                    responsive: true,
                                    legend: {
                                        display: false
                                    }
                                }
                                //Create pie or douhnut chart
                                // You can switch between pie and douhnut using the method below.
                                var tasksPieChart = new Chart(pieChartCanvas, {
                                    type: 'pie',
                                    data: pieData,
                                    options: pieOptions
                                });

                                if (this.api().data().length == 0) {
                                        $('#pieChart').hide();
                                        $('#tasksPiDiv').hide();
                                        $("#followUpPiDiv").removeClass("col-md-6 d-flex justify-content-center");
                                        $("#followUpPiDiv").addClass("col-md-12 d-flex justify-content-center");
                                        $("#piecharttaskId").removeClass("col-md-6 d-flex justify-content-center");
                                        $("#followUpTextDiv").removeClass("col-md-6 d-flex justify-content-center");
                                        $("#followUpTextDiv").addClass("col-md-12 d-flex justify-content-center");
                                        $("#textset1").show();
                                        $("#textset2").hide();
                                        $("#testset1detail").hide();
                                        $("#testset2detail").html("There are no tasks nor follow ups");
                                   }

                            },
                            search: { regex: true, caseInsensitive: true },
                            ajax: {
                                "url": thisBaseUrl + "/employeeDetail/LoadEmployeeTasksData",
                                "type": "POST",
                                "datatype": "json",
                                "data": { userName : userName }
                            },
                            columns: [
                                {
                                    "render": function (data, type, full, meta) {
                                        return '<a href="' + thisBaseUrl + '/tasks/Edit?id=' + full.taskId + '&username=' + currentUserName + '&viewMode=1"><u>' + full.title + '</u> </a>';
                                    }
                                },
                                {
                                    "render": function (data, type, full, meta) {
                                        if (full.status == "Not Started") {
                                            return '<span class="badge badge-secondary">Not Started</span>';
                                        }
                                        else
                                        if (full.status == "In Progress") {
                                            return '<span class="badge badge-warning text-white"> In Progress</span > ';
                                        }
                                        else
                                        if (full.status == "On Hold") {
                                            return '<span class="badge badge-onhold">On Hold</span>';
                                        }
                                        else
                                        if (full.status == "Cancelled") {
                                            return '<span class="badge badge-cancelledtask">Cancelled</span>';
                                        }
                                        else
                                            return '<span class="badge badge-success">Completed</span>';
                                    }
                                },
                                { "data": "sortId", "name": "SortId", "autoWidth": true, "visible": false, "searchable": false },

                            ],
                            order: [[2, 'asc']]
                        });

                    var employeefollowUpsTable = $('#employeefollowUpsTable').
                        DataTable({
                            paging: false,
                            info: false,
                            searching: false,
                            //pageLength: 10,
                            //"scrollY": 200,
                            initComplete: function (settings, json) {
                                var x = document.getElementById("pieDiv");
                                var response = settings.json;
                                if (response.pendingFollowUps == 0) {
                                    $("#followupCount").hide();
                                }
                                $("#followupCount").html(response.pendingFollowUps);
                                var followupsDonutData = {
                                    labels: [
                                        'Pending',
                                        'Completed'
                                    ],
                                    datasets: [
                                        {
                                            data: [response.pendingFollowUps, response.completedFollowUps],
                                            backgroundColor: ['#f39c12', '#00a65a'],
                                        }
                                    ]
                                }

                                var pieChartCanvas2 = $('#pieChart2').get(0).getContext('2d');
                                var pieData = followupsDonutData;
                                var pieOptions = {
                                    maintainAspectRatio: false,
                                    responsive: true,
                                    legend: {
                                        display: false
                                    }
                                }
                                //Create pie or douhnut chart
                                // You can switch between pie and douhnut using the method below.
                                var followupPieChart = new Chart(pieChartCanvas2, {
                                    type: 'pie',
                                    data: pieData,
                                    options: pieOptions
                                });
                                if (this.api().data().length == 0) {
                                    $('#pieChart2').hide();
                                    $('#followUpPiDiv').hide();
                                    $("#tasksPiDiv").removeClass("col-md-6 d-flex justify-content-center");
                                    $("#tasksPiDiv").addClass("col-md-12 d-flex justify-content-center");
                                    $("#textset1").hide();
                                    $("#textset2").show();
                                }
                            },
                            search: { regex: true, caseInsensitive: true },
                            ajax: {
                                "url": thisBaseUrl + "/employeeDetail/LoadEmployeeFollowUps",
                                "type": "POST",
                                "datatype": "json",
                                "data": { userName : userName }
                            },
                            columns: [
                                {
                                    "render": function (data, type, full, meta) {
                                        return '<a href="' + thisBaseUrl + '/tasks/Edit?id=' + full.taskId + '&username=' + currentUserName + '&viewMode=1"><u>' + full.taskInfo + '</u> </a>';
                                    }
                                },
                                 {
                                    "render": function (data, type, full, meta) {
                                        return '<img name="employeeAvatar" src="' + full.avatarImage + '" width="40px" height="40px" class="img-circle elevation-2" alt="User Image"></img>'
                                            + '&nbsp;&nbsp;<span>' + full.followUpEmployeeName + '</span>';
                                    }
                                },
                                {
                                    "render": function (data, type, full, meta) {
                                        if (full.status == "Open") {
                                            return '<span class="badge badge-warning text-white">Open</span>';
                                        }
                                        else if (full.status == "Close") {
                                            return '<span class="badge badge-success">Closed</span>';
                                        }
                                        }   
                                },
                                { "data": "sortId", "name": "SortId", "autoWidth": true, "visible": false, "searchable": false }
                            ],
                            order: [[3, 'asc']]
                        });

                    $("#employee-closePopup-icon").click(function () {
                        $('.modal-backdrop').removeClass("modal-backdrop");
                        employeeDiv.hide();
                    });
                },
                error: function () {
                    alert("Dynamic content load failed.");
                }
            });
        }

    var tasksTable = $('#reportTable')
            .DataTable({
                paging: false,
                initComplete: function (settings, json) {
                    var reportUserDetailDiv = $("#reportUserDetailDiv");
                    $("a[name='employeeDetailLink']").click(function () {
                        showEmployeeDetails($(this).attr("data-username"));
                    });

                    $("span[name='totalTasks']").click(function () {
                        //alert($(this).attr("data-username"));
                        showReportDetails($(this).attr("data-username"), 0);
                    });

                    $("span[name='notStartedTasks']").click(function () {
                        //alert($(this).attr("data-username"));
                        showReportDetails($(this).attr("data-username"), notStartedTaskStatusId);
                    });

                    $("span[name='inProgressTasks']").click(function () {
                        //alert($(this).attr("data-username"));
                        showReportDetails($(this).attr("data-username"), inProgressTaskStatusId);
                    });

                    $("span[name='completedTasks']").click(function () {
                        //alert($(this).attr("data-username"));
                        showReportDetails($(this).attr("data-username"), completedTaskStatusId);
                    });

                    $("span[name='onHoldTasks']").click(function () {
                        //alert($(this).attr("data-username"));
                        showReportDetails($(this).attr("data-username"), onHoldTaskStatusId);
                    });

                     $("span[name='cancelledTasks']").click(function () {
                         //alert($(this).attr("data-username"));
                         showReportDetails($(this).attr("data-username"), cancelledTaskStatusId);
                    });

                    function showReportDetails(userName, statusId) {

                        $.ajax({
                            type: "GET",
                            url: thisBaseUrl + "/reports/GetReportDetail?username=" + userName,
                            contentType: "application/json; charset=utf-8",
                            data: null, //{ userName: userName, statusId = statusId },
                            datatype: "json",
                            success: function (data) {

                                reportUserDetailDiv.html(data);
                                reportUserDetailDiv.find('.modal').modal('show');
                                reportUserDetailDiv.show();

                                var reportUserDetailTable = $('#reportUserDetailTable').
                                    DataTable({
                                        paging: false,
                                        info: false,
                                        searching: false,
                                        //scrollY: 200,
                                        scrollCollapse: true,
                                        initComplete: function (settings, json) {
                                            var thisTaskStatus = "";
                                            if (statusId == notStartedTaskStatusId) {
                                                thisTaskStatus = "Not Started";
                                            }
                                            else if (statusId == completedTaskStatusId) {
                                                thisTaskStatus = "Completed";
                                            }
                                            else if (statusId == inProgressTaskStatusId) {
                                                thisTaskStatus = "In Progress";
                                            }
                                            else if (statusId == onHoldTaskStatusId) {
                                                thisTaskStatus = "On Hold";
                                            }
                                            else if (statusId == cancelledTaskStatusId) {
                                                thisTaskStatus = "Cancelled";
                                            }
                                            $("#reportUserDetailHeading").html(this.api().data().length +  " " + thisTaskStatus + " task(s) under " + $("#reportEmployeeName").val());
                                        },
                                        //search: { regex: true, caseInsensitive: true },
                                        ajax: {
                                            "url": thisBaseUrl + "/reports/GetTaskList",
                                            "type": "POST",
                                            "datatype": "json",
                                            "data": { userName: userName, statusId : statusId }
                                        },
                                        columns: [
                                        {
                                            "render": function (data, type, full, meta) {
                                                return '<a href="' + thisBaseUrl + '/tasks/Edit?id=' + full.taskId + '&username=' + currentUserName + '&viewMode=1"><u>' + full.title + '</u> </a>';
                                            }
                                        },
                                        //{ "data": "status", "name": "Status", "autoWidth": true, "visible": true, "searchable": true },
                                        {
                                            "render": function (data, type, full, meta) {
                                        if (full.status == "NotStarted") {
                                            return '<span class="badge badge-secondary">Not Started</span>';
                                        }
                                        else
                                        if (full.status == "InProgress") {
                                            return '<span class="badge badge-warning text-white"> In Progress</span>';
                                        }
                                        else
                                        if (full.status == "OnHold") {
                                            return '<span class="badge badge-secondary">On Hold</span>';
                                        }
                                        else
                                        if (full.status == "Cancelled") {
                                            return '<span class="badge badge-secondary">Cancelled</span>';
                                        }
                                        else
                                            return '<span class="badge badge-success">Completed</span>';
                                        }
                                        }

                                        ]
                                    });
                            },
                            error: function () {
                                alert("Dynamic content load failed.");
                            }
                        });
                    }

                },
            search: {regex: true, caseInsensitive: true},
                ajax: {
                "url": thisBaseUrl + "/reports/LoadReportsData?username=" + currentUserName,
                "type": "POST",
                "datatype": "json"
                },
                info: false,
                columnDefs : [ {
                    targets  : '_all',
                    orderable : false,
                }],
                columns: [
                { "data": "tagId", "name": "Tag Id", "autoWidth": true, "visible": false, "searchable": true },
                {
                    "render": function (data, type, full, meta) {
                        if (full.isDeptName == false) {
                            return '<span style="padding-left:' + full.departmentLevel + 'em"></span>'
                                + '<img name="employeeAvatar" src="' + full.avatarImage+ '" width="40px" height="40px" class="img-circle elevation-2" alt = "User Image" ></img>'
                                + '&nbsp;&nbsp;<a href="javascript:void(null);" data-username="' + full.tagUserName + '" name = "employeeDetailLink" > ' + full.tagName + '</span >';
                        }
                        else
                            return '<span style="padding-left:'+full.departmentLevel+'em">'+ full.tagName +'</span>';
                        }
                },
                {
                        "render": function (data, type, full, meta) {
                            if (full.tagCount != "0") {
                                return '<span name="totalTasks" data-username="'+full.tagUserName+'" class="badge badge-light">' + full.tagCount + '</span>';
                            }
                            else {
                                return '';
                            }
                        }
                },
                {
                        "render": function (data, type, full, meta) {
                            if (full.notStartedTasksCount != "0") {
                                return '<span style="" name="notStartedTasks" data-username="'+full.tagUserName+'" class="badge badge-secondary">' + full.notStartedTasksCount + '</span>';
                            }
                            else {
                                return '';
                            }
                        }
                },
                {
                        "render": function (data, type, full, meta) {
                            if (full.inProgressTasksCount != "0") {
                                return '<span name="inProgressTasks" data-username="'+full.tagUserName+'" class="badge badge-warning">' + full.inProgressTasksCount + '</span>';
                            }
                            else {
                                return '';
                            }
                        }
                },
                {
                        "render": function (data, type, full, meta) {
                            if (full.completedTasksCount != "0") {
                                return '<span name="completedTasks" data-username="'+full.tagUserName+'" class="badge badge-success">' + full.completedTasksCount + '</span>';
                            }
                            else {
                                return '';
                            }
                        }
                },
                {
                        "render": function (data, type, full, meta) {
                            if (full.onHoldTasksCount != "0") {
                                return '<span name="onHoldTasks" data-username="'+full.tagUserName+'" class="badge badge-secondary">' + full.onHoldTasksCount + '</span>';
                            }
                            else {
                                return '';
                            }
                        }
                },

                {
                        "render": function (data, type, full, meta) {
                            if (full.cancelledTasksCount != "0") {
                                return '<span name="cancelledTasks" data-username="'+full.tagUserName+'" class="badge badge-secondary">' + full.cancelledTasksCount + '</span>';
                            }
                            else {
                                return '';
                            }
                        }
                },

                ],
                order: [[0, 'asc']],
                rowCallback: function (row, data) {
                    console.log(data.isBaseDepartment);
                    if (data.isDeptName == true) {
                        $(row).addClass('selected');
                    }
                    //if (data.isBaseDepartment == true) {
                    //        console.log("here now");
                    //        $(row).addClass('selected1');
                    //} 
                }
        });


});
    </script>
    <script src="../../dist/js/global.js"></script>

}